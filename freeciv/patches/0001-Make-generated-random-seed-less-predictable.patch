From 2cd28fe1fb28c63991688caaa92c1f752ea33d3c Mon Sep 17 00:00:00 2001
From: Marko Lindqvist <cazfi74@gmail.com>
Date: Tue, 16 Mar 2021 22:33:36 +0200
Subject: [PATCH] Make generated random seed less predictable

Patch by Ilkka Virta and myself

See hrm Feature #914184

Signed-off-by: Marko Lindqvist <cazfi74@gmail.com>
---
 configure.ac                  |   6 ++
 meson.build                   |   1 +
 server/srv_main.c             |   3 +-
 translations/core/POTFILES.in |   1 +
 utility/Makefile.am           |   2 +
 utility/randseed.c            | 192 ++++++++++++++++++++++++++++++++++
 utility/randseed.h            |  29 +++++
 7 files changed, 233 insertions(+), 1 deletion(-)
 create mode 100644 utility/randseed.c
 create mode 100644 utility/randseed.h

diff --git a/configure.ac b/configure.ac
index 73476b4175..717389364c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1362,6 +1362,12 @@ AC_CHECK_FUNCS([bind connect fileno flock ftime gethostbyname gethostname \
                 getline _strcoll stricoll _stricoll strcasecoll \
                 backtrace setenv putenv])
 
+dnl Possible random sources on Unixen
+AC_CHECK_FUNCS([getentropy clock_gettime])
+
+dnl TODO: Reimplement this check, in a cross-compiling friendly way
+dnl AC_CHECK_FILES([/dev/urandom])
+
 dnl Possible "-Wmissing-declarations" and "-Werror" will prune out
 dnl cases where we should not use _mkdir() even if it's possible to link against it
 fc_save_CPPFLAGS="$CPPFLAGS"
diff --git a/meson.build b/meson.build
index 4cff46daa4..516550bbbc 100644
--- a/meson.build
+++ b/meson.build
@@ -243,6 +243,7 @@ common_lib = library('freeciv',
   'utility/netfile.c',
   'utility/netintf.c',
   'utility/rand.c',
+  'utility/randseed.c',
   'utility/registry.c',
   'utility/registry_ini.c',
   'utility/registry_xml.c',
diff --git a/server/srv_main.c b/server/srv_main.c
index 7ba6dfd585..9c0923b1da 100644
--- a/server/srv_main.c
+++ b/server/srv_main.c
@@ -54,6 +54,7 @@
 #include "mem.h"
 #include "netintf.h"
 #include "rand.h"
+#include "randseed.h"
 #include "registry.h"
 #include "support.h"
 #include "timing.h"
@@ -200,7 +201,7 @@ void init_game_seed(void)
   if (game.server.seed_setting == 0) {
     /* We strip the high bit for now because neither game file nor
        server options can handle unsigned ints yet. - Cedric */
-    game.server.seed = time(NULL) & (MAX_UINT32 >> 1);
+    game.server.seed = generate_game_seed() & (MAX_UINT32 >> 1);
 #ifdef FREECIV_TESTMATIC
      /* Log command to reproduce the gameseed */
     log_testmatic("set gameseed %d", game.server.seed);
diff --git a/translations/core/POTFILES.in b/translations/core/POTFILES.in
index f697a59f36..7975b65d5c 100644
--- a/translations/core/POTFILES.in
+++ b/translations/core/POTFILES.in
@@ -411,6 +411,7 @@ utility/inputfile.c
 utility/log.c
 utility/netfile.c
 utility/netintf.c
+utility/randseed.c
 utility/registry_ini.c
 utility/registry_xml.c
 utility/shared.c
diff --git a/utility/Makefile.am b/utility/Makefile.am
index 8abdbad9cc..b7657015d2 100644
--- a/utility/Makefile.am
+++ b/utility/Makefile.am
@@ -55,6 +55,8 @@ libcivutility_la_SOURCES = \
 		netintf.h	\
 		rand.c		\
 		rand.h		\
+		randseed.c	\
+		randseed.h	\
 		registry.c	\
 		registry.h	\
 		registry_ini.c	\
diff --git a/utility/randseed.c b/utility/randseed.c
new file mode 100644
index 0000000000..ddaa889d82
--- /dev/null
+++ b/utility/randseed.c
@@ -0,0 +1,192 @@
+/***********************************************************************
+ Freeciv - Copyright (C) 2021 The Freeciv Team
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+***********************************************************************/
+
+/* Random number initialization, possibly system-dependant */
+
+#ifdef HAVE_CONFIG_H
+#include <fc_config.h>
+#endif
+
+#include "fc_prehdrs.h"
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdint.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <time.h>
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+/* utility */
+#include "fcintl.h"
+#include "log.h"
+
+#include "randseed.h"
+
+/**********************************************************************//**
+  Read a 32-bit random value using getentropy(), if available.
+  (Linux, FreeBSD, OpenBSD, macOS)
+  Return FALSE on error, otherwise return TRUE and store seed in *ret.
+**************************************************************************/
+static bool generate_seed_getentropy(uint32_t *ret)
+{
+#if HAVE_GETENTROPY
+  /* getentropy() is from OpenBSD, and should be supported on at least
+   * FreeBSD and glibc on Linux (as a wrapper to getrandom()) as well.
+   */
+  uint32_t seed = 0;
+  
+  if (getentropy(&seed, 4) == 0) {
+    *ret = seed;
+
+    return TRUE;
+  } else {
+    log_error(_("getentropy() failed: %s"), strerror(errno));
+  }
+#endif /* HAVE_GETENTROPY */
+
+  return FALSE;
+}
+
+/**********************************************************************//**
+  Read a 32-bit random value using /dev/urandom, if available. 
+  (Most Unix-like systems)
+  Return FALSE on error, otherwise return TRUE and store seed in *ret.
+**************************************************************************/
+static bool generate_seed_urandom(uint32_t *ret)
+{
+#if HAVE__DEV_URANDOM   /* the first slash turns to an extra underline */
+  /*
+   * /dev/urandom should be available on most Unixen. The Wikipedia page
+   * mentions Linux, FreeBSD, OpenBSD, macOS as well as Solaris, NetBSD,
+   * Tru64 UNIX 5.1B, AIX 5.2 and HP-UX 11i v2. 
+   *
+   * However, opening it may fail if the game is running in a chroot without
+   * it, or is otherwise restricted from accessing it. This is why getentropy()
+   * is preferred. 
+   */
+  static const char *random_device = "/dev/urandom";
+  int fd = 0;
+  uint32_t seed = 0;
+  bool ok = FALSE;
+
+  /* stdio would read an unnecessarily large block, which may mess up users
+   * /dev/random on Linux, so use the low-level calls instead. */
+  fd = open(random_device, O_RDONLY);
+  if (fd == -1) {
+    /* Only warning as we fallback to other randseed generation methods */
+    log_warn(_("Opening %s failed: %s"), random_device, strerror(errno));
+  } else {
+    int n = read(fd, &seed, 4);
+
+    if (n == -1) {
+      log_warn(_("Reading %s failed: %s"), random_device, strerror(errno));
+    } else if (n != 4) {
+      log_warn(_("Reading %s: short read without error"), random_device);
+    } else {
+      ok = 1;
+    }
+    close(fd);
+  }
+  if (ok) {
+    *ret = seed;
+
+    return TRUE;
+  }
+#endif /* HAVE__DEV_URANDOM */
+
+  return FALSE;
+}
+
+/**********************************************************************//**
+  Generate a 32-bit random-ish value from the current time, using
+  clock_gettime(), if available. (POSIX-compatible systems.)
+  Return FALSE on error, otherwise return TRUE and store seed in *ret.
+**************************************************************************/
+static bool generate_seed_clock_gettime(uint32_t *ret)
+{
+#if HAVE_CLOCK_GETTIME
+  /* 
+   * clock_gettime() nominally gives nanoseconds, but the real granularity may be
+   * worse, making the lowest bits less useful. On the other hand, the lower bits
+   * of full seconds are the most useful, the high bits being very predictable.
+   * Xor them together to hopefully get something relatively unpredictable in the
+   * bottom 30 bits. 
+   */
+  uint32_t seed = 0;
+  struct timespec tp;
+
+  if (clock_gettime(CLOCK_REALTIME, &tp) == 0) {
+    seed  = tp.tv_nsec;
+    seed ^= tp.tv_sec;
+    *ret = seed;
+
+    return TRUE;
+  } else {
+    /* This shouldn't fail if the function is supported on the system */
+    log_error(_("clock_gettime(CLOCK_REALTIME) failed: %s"), strerror(errno));
+  }
+#endif /* HAVE_CLOCK_GETTIME */
+
+  return FALSE;
+}
+
+/**********************************************************************//**
+  Generate a lousy 32-bit random-ish value from the current time.
+  Return TRUE and store seed in *ret.
+**************************************************************************/
+static bool generate_seed_time(uint32_t *ret)
+{
+  /* No reasonable way this can fail */
+  *ret = (uint32_t) time(NULL);
+
+  return TRUE;
+}
+
+
+/**********************************************************************//**
+  Return a random 32-bit value to use as game seed, by whatever means
+  the underlying system provides. 
+**************************************************************************/
+unsigned int generate_game_seed(void)
+{
+  uint32_t seed = 0;
+  
+  /* Good random sources */
+  if (generate_seed_getentropy(&seed)) {
+    log_debug("Got random seed from getentropy()");
+    return seed;
+  }
+  if (generate_seed_urandom(&seed)) {
+    log_debug("Got random seed from urandom()");
+    return seed;
+  }
+
+  /* Not so good random source */
+  log_normal(_("No good random source usable. Falling back to time-based random seeding."));
+
+  if (generate_seed_clock_gettime(&seed)) {
+    log_debug("Got random seed with clock_gettime()");
+
+    return seed;
+  }
+
+  /* Lousy last-case source */
+  log_warn(_("Falling back to predictable random seed from current coarse-granularity time."));
+  generate_seed_time(&seed);
+  log_debug("Got random seed from time()");
+
+  return seed;
+}
diff --git a/utility/randseed.h b/utility/randseed.h
new file mode 100644
index 0000000000..256e7cdccf
--- /dev/null
+++ b/utility/randseed.h
@@ -0,0 +1,29 @@
+/***********************************************************************
+ Freeciv - Copyright (C) 2021 The Freeciv Team
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+***********************************************************************/
+
+/* Random number initialization */
+
+#ifndef FC__RANDSEED_H
+#define FC__RANDSEED_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+unsigned int generate_game_seed(void);
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif  /* FC__RAND_H */
-- 
2.30.2


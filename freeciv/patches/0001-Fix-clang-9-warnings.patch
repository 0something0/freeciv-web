From a44882f973ff5f6a7fece0d5eb5a8b46ca287e89 Mon Sep 17 00:00:00 2001
From: Marko Lindqvist <cazfi74@gmail.com>
Date: Sun, 23 Feb 2020 01:43:34 +0200
Subject: [PATCH] Fix clang-9 warnings

This is a port to master from the complete patch for S3_0.
There might be some master-specific warnings that this does not catch.

See hrm Bug #859248

Signed-off-by: Marko Lindqvist <cazfi74@gmail.com>
---
 client/climisc.c               |  6 ++---
 client/editor.c                | 48 +++++++++++++++++-----------------
 client/gui-gtk-3.0/editgui.c   | 12 ++++-----
 client/gui-gtk-3.0/editprop.c  | 10 +++----
 client/gui-gtk-3.22/editgui.c  | 12 ++++-----
 client/gui-gtk-3.22/editprop.c | 10 +++----
 client/gui-gtk-4.0/editgui.c   | 12 ++++-----
 client/gui-gtk-4.0/editprop.c  | 12 ++++-----
 client/mapview_common.c        |  6 ++---
 common/generate_packets.py     |  4 +--
 common/networking/packets.c    |  3 +--
 common/traderoutes.c           |  2 +-
 common/unit.c                  |  2 +-
 utility/generate_specenum.py   |  7 +++--
 14 files changed, 72 insertions(+), 74 deletions(-)

diff --git a/client/climisc.c b/client/climisc.c
index 61ec5c72d0..fdc0292db8 100644
--- a/client/climisc.c
+++ b/client/climisc.c
@@ -940,7 +940,7 @@ int num_present_units_in_city(struct city *pcity)
   Handles a chat or event message.
 **************************************************************************/
 void handle_event(const char *featured_text, struct tile *ptile,
-                  enum event_type event, int turn, int phase, int conn_id)
+		  enum event_type event, int turn, int phase, int conn_id)
 {
   char plain_text[MAX_LEN_MSG];
   struct text_tag_list *tags;
@@ -952,13 +952,13 @@ void handle_event(const char *featured_text, struct tile *ptile,
   if (!event_type_is_valid(event))  {
     /* Server may have added a new event; leave as MW_OUTPUT */
     log_verbose("Unknown event type %d!", event);
-  } else if (event >= 0)  {
+  } else {
     where = messages_where[event];
   }
 
   /* Get the original text. */
   featured_text_to_plain_text(featured_text, plain_text,
-                              sizeof(plain_text), &tags, conn_id != -1);
+			      sizeof(plain_text), &tags, conn_id != -1);
 
   /* Display link marks when an user is pointed us something. */
   if (conn_id != -1) {
diff --git a/client/editor.c b/client/editor.c
index 9d3250ff41..d486a6f5bb 100644
--- a/client/editor.c
+++ b/client/editor.c
@@ -153,7 +153,7 @@ static void tool_init(enum editor_tool_type ett, const char *name,
 {
   struct editor_tool *tool;
 
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -273,7 +273,7 @@ void editor_set_tool(enum editor_tool_type ett)
     return;
   }
 
-  if (!(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -298,8 +298,8 @@ enum editor_tool_type editor_get_tool(void)
 void editor_tool_set_mode(enum editor_tool_type ett,
                           enum editor_tool_mode etm)
 {
-  if (editor == NULL || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)
-      || !(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)
+  if (editor == NULL || !(ett < NUM_EDITOR_TOOL_TYPES)
+      || !(etm < NUM_EDITOR_TOOL_MODES)
       || !editor_tool_has_mode(ett, etm)) {
     return;
   }
@@ -313,8 +313,8 @@ void editor_tool_set_mode(enum editor_tool_type ett,
 bool editor_tool_has_mode(enum editor_tool_type ett,
                           enum editor_tool_mode etm)
 {
-  if (editor == NULL || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)
-      || !(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)) {
+  if (editor == NULL || !(ett < NUM_EDITOR_TOOL_TYPES)
+      || !(etm < NUM_EDITOR_TOOL_MODES)) {
     return FALSE;
   }
 
@@ -334,7 +334,7 @@ bool editor_tool_has_mode(enum editor_tool_type ett,
 ****************************************************************************/
 enum editor_tool_mode editor_tool_get_mode(enum editor_tool_type ett)
 {
-  if (editor == NULL || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (editor == NULL || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return NUM_EDITOR_TOOL_MODES;
   }
   return editor->tools[ett].mode;
@@ -358,7 +358,7 @@ bool editor_is_active(void)
 ****************************************************************************/
 bool editor_tool_is_usable(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
 
@@ -384,7 +384,7 @@ bool editor_tool_is_usable(enum editor_tool_type ett)
 ****************************************************************************/
 bool editor_tool_has_value(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
   return editor->tools[ett].flags & ETF_HAS_VALUE;
@@ -396,7 +396,7 @@ bool editor_tool_has_value(enum editor_tool_type ett)
 ****************************************************************************/
 void editor_tool_set_value(enum editor_tool_type ett, int value)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)
       || !editor_tool_has_value(ett)) {
     return;
   }
@@ -408,7 +408,7 @@ void editor_tool_set_value(enum editor_tool_type ett, int value)
 ****************************************************************************/
 int editor_tool_get_value(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)
       || !editor_tool_has_value(ett)) {
     return 0;
   }
@@ -1158,7 +1158,7 @@ void editor_apply_tool_to_selection(void)
 ****************************************************************************/
 const char *editor_tool_get_name(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return "";
   }
 
@@ -1206,7 +1206,7 @@ const char *editor_tool_get_value_name(enum editor_tool_type emt, int value)
 ****************************************************************************/
 bool editor_tool_has_size(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
   return editor->tools[ett].flags & ETF_HAS_SIZE;
@@ -1217,7 +1217,7 @@ bool editor_tool_has_size(enum editor_tool_type ett)
 ****************************************************************************/
 int editor_tool_get_size(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return 1;
   }
   return editor->tools[ett].size;
@@ -1228,7 +1228,7 @@ int editor_tool_get_size(enum editor_tool_type ett)
 ****************************************************************************/
 void editor_tool_set_size(enum editor_tool_type ett, int size)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
   editor->tools[ett].size = MAX(1, size);
@@ -1240,7 +1240,7 @@ void editor_tool_set_size(enum editor_tool_type ett, int size)
 ****************************************************************************/
 bool editor_tool_has_count(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
   return editor->tools[ett].flags & ETF_HAS_COUNT;
@@ -1251,7 +1251,7 @@ bool editor_tool_has_count(enum editor_tool_type ett)
 ****************************************************************************/
 int editor_tool_get_count(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return 1;
   }
   return editor->tools[ett].count;
@@ -1262,7 +1262,7 @@ int editor_tool_get_count(enum editor_tool_type ett)
 ****************************************************************************/
 void editor_tool_set_count(enum editor_tool_type ett, int count)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
   editor->tools[ett].count = MAX(1, count);
@@ -1276,7 +1276,7 @@ struct sprite *editor_tool_get_sprite(enum editor_tool_type ett)
 {
   const struct editor_sprites *sprites;
 
-  if (!tileset || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!tileset || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return NULL;
   }
 
@@ -1326,7 +1326,7 @@ struct sprite *editor_tool_get_sprite(enum editor_tool_type ett)
 ****************************************************************************/
 const char *editor_tool_get_tooltip(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)
       || !editor->tools[ett].tooltip) {
     return "";
   }
@@ -1340,7 +1340,7 @@ const char *editor_tool_get_tooltip(enum editor_tool_type ett)
 ****************************************************************************/
 int editor_tool_get_applied_player(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return -1;
   }
   return editor->tools[ett].applied_player_no;
@@ -1352,7 +1352,7 @@ int editor_tool_get_applied_player(enum editor_tool_type ett)
 void editor_tool_set_applied_player(enum editor_tool_type ett,
                                     int player_no)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
   editor->tools[ett].applied_player_no = player_no;
@@ -1364,7 +1364,7 @@ void editor_tool_set_applied_player(enum editor_tool_type ett,
 ****************************************************************************/
 bool editor_tool_has_applied_player(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
   return editor->tools[ett].flags & ETF_HAS_APPLIED_PLAYER;
@@ -1376,7 +1376,7 @@ bool editor_tool_has_applied_player(enum editor_tool_type ett)
 ****************************************************************************/
 bool editor_tool_has_value_erase(enum editor_tool_type ett)
 {
-  if (!editor || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!editor || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
   return editor->tools[ett].flags & ETF_HAS_VALUE_ERASE;
diff --git a/client/gui-gtk-3.0/editgui.c b/client/gui-gtk-3.0/editgui.c
index 17d6a7f230..5745fa20a4 100644
--- a/client/gui-gtk-3.0/editgui.c
+++ b/client/gui-gtk-3.0/editgui.c
@@ -137,7 +137,7 @@ static void refresh_all_buttons(struct editbar *eb)
     gtk_widget_set_sensitive(tb, editor_tool_has_mode(ett, i));
   }
 
-  if (0 <= ett && ett < NUM_EDITOR_TOOL_TYPES
+  if (ett < NUM_EDITOR_TOOL_TYPES
       && eb->tool_buttons[ett] != NULL) {
     tb = eb->tool_buttons[ett];
     disable_gobject_callback(G_OBJECT(tb),
@@ -159,7 +159,7 @@ static void editbar_mode_button_toggled(GtkToggleButton *tb,
   enum editor_tool_type ett;
 
   etm = GPOINTER_TO_INT(userdata);
-  if (!(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)) {
+  if (!(etm < NUM_EDITOR_TOOL_MODES)) {
     return;
   }
 
@@ -176,7 +176,7 @@ static void editbar_mode_button_toggled(GtkToggleButton *tb,
 ****************************************************************************/
 static void try_to_set_editor_tool(enum editor_tool_type ett)
 {
-  if (!(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -360,7 +360,7 @@ static bool editgui_run_tool_selection(enum editor_tool_type ett)
   int res = -1;
   
   eb = editgui_get_editbar();
-  if (eb == NULL || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (eb == NULL || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
 
@@ -413,7 +413,7 @@ static void editbar_add_tool_button(struct editbar *eb,
   struct sprite *sprite;
   int i;
 
-  if (!eb || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!eb || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -483,7 +483,7 @@ static void editbar_add_mode_button(struct editbar *eb,
   struct sprite *sprite;
   const char *tooltip;
 
-  if (!eb || !(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)) {
+  if (!eb || !(etm < NUM_EDITOR_TOOL_MODES)) {
     return;
   }
 
diff --git a/client/gui-gtk-3.0/editprop.c b/client/gui-gtk-3.0/editprop.c
index 1a22ff5b19..208fc31eaa 100644
--- a/client/gui-gtk-3.0/editprop.c
+++ b/client/gui-gtk-3.0/editprop.c
@@ -4717,7 +4717,7 @@ property_page_new(enum editor_object_type objtype,
   const char *attr_type_str, *name, *tooltip;
   gchar *title;
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return NULL;
   }
 
@@ -6091,7 +6091,7 @@ static bool property_editor_add_page(struct property_editor *pe,
     return FALSE;
   }
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return FALSE;
   }
 
@@ -6117,7 +6117,7 @@ static struct property_page *
 property_editor_get_page(struct property_editor *pe,
                          enum editor_object_type objtype)
 {
-  if (!pe || !(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!pe || !(objtype < NUM_OBJTYPES)) {
     return NULL;
   }
 
@@ -6227,7 +6227,7 @@ void property_editor_popup(struct property_editor *pe,
   gtk_widget_show_all(pe->widget);
 
   gtk_window_present(GTK_WINDOW(pe->widget));
-  if (0 <= objtype && objtype < NUM_OBJTYPES) {
+  if (objtype < NUM_OBJTYPES) {
     gtk_notebook_set_current_page(GTK_NOTEBOOK(pe->notebook), objtype);
   }
 }
@@ -6258,7 +6258,7 @@ void property_editor_handle_object_changed(struct property_editor *pe,
     return;
   }
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return;
   }
 
diff --git a/client/gui-gtk-3.22/editgui.c b/client/gui-gtk-3.22/editgui.c
index 7bbe2b4a43..dd69a6f2b1 100644
--- a/client/gui-gtk-3.22/editgui.c
+++ b/client/gui-gtk-3.22/editgui.c
@@ -137,7 +137,7 @@ static void refresh_all_buttons(struct editbar *eb)
     gtk_widget_set_sensitive(tb, editor_tool_has_mode(ett, i));
   }
 
-  if (0 <= ett && ett < NUM_EDITOR_TOOL_TYPES
+  if (ett < NUM_EDITOR_TOOL_TYPES
       && eb->tool_buttons[ett] != NULL) {
     tb = eb->tool_buttons[ett];
     disable_gobject_callback(G_OBJECT(tb),
@@ -159,7 +159,7 @@ static void editbar_mode_button_toggled(GtkToggleButton *tb,
   enum editor_tool_type ett;
 
   etm = GPOINTER_TO_INT(userdata);
-  if (!(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)) {
+  if (!(etm < NUM_EDITOR_TOOL_MODES)) {
     return;
   }
 
@@ -176,7 +176,7 @@ static void editbar_mode_button_toggled(GtkToggleButton *tb,
 ****************************************************************************/
 static void try_to_set_editor_tool(enum editor_tool_type ett)
 {
-  if (!(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -360,7 +360,7 @@ static bool editgui_run_tool_selection(enum editor_tool_type ett)
   int res = -1;
 
   eb = editgui_get_editbar();
-  if (eb == NULL || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (eb == NULL || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
 
@@ -413,7 +413,7 @@ static void editbar_add_tool_button(struct editbar *eb,
   struct sprite *sprite;
   int i;
 
-  if (!eb || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!eb || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -483,7 +483,7 @@ static void editbar_add_mode_button(struct editbar *eb,
   struct sprite *sprite;
   const char *tooltip;
 
-  if (!eb || !(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)) {
+  if (!eb || !(etm < NUM_EDITOR_TOOL_MODES)) {
     return;
   }
 
diff --git a/client/gui-gtk-3.22/editprop.c b/client/gui-gtk-3.22/editprop.c
index a7913c8913..36f292e74f 100644
--- a/client/gui-gtk-3.22/editprop.c
+++ b/client/gui-gtk-3.22/editprop.c
@@ -4718,7 +4718,7 @@ property_page_new(enum editor_object_type objtype,
   const char *attr_type_str, *name, *tooltip;
   gchar *title;
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return NULL;
   }
 
@@ -6091,7 +6091,7 @@ static bool property_editor_add_page(struct property_editor *pe,
     return FALSE;
   }
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return FALSE;
   }
 
@@ -6117,7 +6117,7 @@ static struct property_page *
 property_editor_get_page(struct property_editor *pe,
                          enum editor_object_type objtype)
 {
-  if (!pe || !(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!pe || !(objtype < NUM_OBJTYPES)) {
     return NULL;
   }
 
@@ -6227,7 +6227,7 @@ void property_editor_popup(struct property_editor *pe,
   gtk_widget_show_all(pe->widget);
 
   gtk_window_present(GTK_WINDOW(pe->widget));
-  if (0 <= objtype && objtype < NUM_OBJTYPES) {
+  if (objtype < NUM_OBJTYPES) {
     gtk_notebook_set_current_page(GTK_NOTEBOOK(pe->notebook), objtype);
   }
 }
@@ -6258,7 +6258,7 @@ void property_editor_handle_object_changed(struct property_editor *pe,
     return;
   }
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return;
   }
 
diff --git a/client/gui-gtk-4.0/editgui.c b/client/gui-gtk-4.0/editgui.c
index 87721ccd3e..128998c71f 100644
--- a/client/gui-gtk-4.0/editgui.c
+++ b/client/gui-gtk-4.0/editgui.c
@@ -137,7 +137,7 @@ static void refresh_all_buttons(struct editbar *eb)
     gtk_widget_set_sensitive(tb, editor_tool_has_mode(ett, i));
   }
 
-  if (0 <= ett && ett < NUM_EDITOR_TOOL_TYPES
+  if (ett < NUM_EDITOR_TOOL_TYPES
       && eb->tool_buttons[ett] != NULL) {
     tb = eb->tool_buttons[ett];
     disable_gobject_callback(G_OBJECT(tb),
@@ -159,7 +159,7 @@ static void editbar_mode_button_toggled(GtkToggleButton *tb,
   enum editor_tool_type ett;
 
   etm = GPOINTER_TO_INT(userdata);
-  if (!(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)) {
+  if (!(etm < NUM_EDITOR_TOOL_MODES)) {
     return;
   }
 
@@ -176,7 +176,7 @@ static void editbar_mode_button_toggled(GtkToggleButton *tb,
 ****************************************************************************/
 static void try_to_set_editor_tool(enum editor_tool_type ett)
 {
-  if (!(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -360,7 +360,7 @@ static bool editgui_run_tool_selection(enum editor_tool_type ett)
   int res = -1;
 
   eb = editgui_get_editbar();
-  if (eb == NULL || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (eb == NULL || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return FALSE;
   }
 
@@ -415,7 +415,7 @@ static void editbar_add_tool_button(struct editbar *eb,
   struct sprite *sprite;
   int i;
 
-  if (!eb || !(0 <= ett && ett < NUM_EDITOR_TOOL_TYPES)) {
+  if (!eb || !(ett < NUM_EDITOR_TOOL_TYPES)) {
     return;
   }
 
@@ -485,7 +485,7 @@ static void editbar_add_mode_button(struct editbar *eb,
   struct sprite *sprite;
   const char *tooltip;
 
-  if (!eb || !(0 <= etm && etm < NUM_EDITOR_TOOL_MODES)) {
+  if (!eb || !(etm < NUM_EDITOR_TOOL_MODES)) {
     return;
   }
 
diff --git a/client/gui-gtk-4.0/editprop.c b/client/gui-gtk-4.0/editprop.c
index c52c06b5e4..163e102505 100644
--- a/client/gui-gtk-4.0/editprop.c
+++ b/client/gui-gtk-4.0/editprop.c
@@ -4719,7 +4719,7 @@ property_page_new(enum editor_object_type objtype,
   const char *attr_type_str, *name, *tooltip;
   gchar *title;
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return NULL;
   }
 
@@ -6101,7 +6101,7 @@ static bool property_editor_add_page(struct property_editor *pe,
     return FALSE;
   }
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return FALSE;
   }
 
@@ -6125,9 +6125,9 @@ static bool property_editor_add_page(struct property_editor *pe,
 ****************************************************************************/
 static struct property_page *
 property_editor_get_page(struct property_editor *pe,
-                         enum editor_object_type objtype)
+			 enum editor_object_type objtype)
 {
-  if (!pe || !(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!pe || !(objtype < NUM_OBJTYPES)) {
     return NULL;
   }
 
@@ -6239,7 +6239,7 @@ void property_editor_popup(struct property_editor *pe,
   gtk_widget_show(pe->widget);
 
   gtk_window_present(GTK_WINDOW(pe->widget));
-  if (0 <= objtype && objtype < NUM_OBJTYPES) {
+  if (objtype < NUM_OBJTYPES) {
     gtk_notebook_set_current_page(GTK_NOTEBOOK(pe->notebook), objtype);
   }
 }
@@ -6270,7 +6270,7 @@ void property_editor_handle_object_changed(struct property_editor *pe,
     return;
   }
 
-  if (!(0 <= objtype && objtype < NUM_OBJTYPES)) {
+  if (!(objtype < NUM_OBJTYPES)) {
     return;
   }
 
diff --git a/client/mapview_common.c b/client/mapview_common.c
index 0d1b31f672..43140412c1 100644
--- a/client/mapview_common.c
+++ b/client/mapview_common.c
@@ -3391,7 +3391,7 @@ void mapdeco_add_gotoline(const struct tile *ptile, enum direction8 dir)
   bool changed;
 
   if (!mapdeco_gotoline_table || !ptile
-      || !(0 <= dir && dir <= direction8_max())) {
+      || !(dir <= direction8_max())) {
     return;
   }
   ptile_dest = mapstep(&(wld.map), ptile, dir);
@@ -3425,7 +3425,7 @@ void mapdeco_remove_gotoline(const struct tile *ptile,
   bool changed = FALSE;
 
   if (!mapdeco_gotoline_table || !ptile
-      || !(0 <= dir && dir <= direction8_max())) {
+      || !(dir <= direction8_max())) {
     return;
   }
 
@@ -3494,7 +3494,7 @@ bool mapdeco_is_gotoline_set(const struct tile *ptile,
 {
   struct gotoline_counter *pglc;
 
-  if (!ptile || !(0 <= dir && dir <= direction8_max())
+  if (!ptile || !(dir <= direction8_max())
       || !mapdeco_gotoline_table) {
     return FALSE;
   }
diff --git a/common/generate_packets.py b/common/generate_packets.py
index ccf18721a4..6504f6faaf 100755
--- a/common/generate_packets.py
+++ b/common/generate_packets.py
@@ -1614,7 +1614,7 @@ def get_packet_name(packets):
 
     extro='''  };
 
-  return (type >= 0 && type < PACKET_LAST ? names[type] : "unknown");
+  return (type < PACKET_LAST ? names[type] : "unknown");
 }
 
 '''
@@ -1647,7 +1647,7 @@ def get_packet_has_game_info_flag(packets):
 
     extro='''  };
 
-  return (type >= 0 && type < PACKET_LAST ? flag[type] : FALSE);
+  return (type < PACKET_LAST ? flag[type] : FALSE);
 }
 
 '''
diff --git a/common/networking/packets.c b/common/networking/packets.c
index 1ff482f677..c0dbf1f5e4 100644
--- a/common/networking/packets.c
+++ b/common/networking/packets.c
@@ -514,8 +514,7 @@ void *get_packet_from_connection_raw(struct connection *pc,
   dio_get_type_raw(&din, pc->packet_header.type, &utype.itype);
   utype.type = utype.itype;
 
-  if (utype.type < 0
-      || utype.type >= PACKET_LAST
+  if (utype.type >= PACKET_LAST
       || (receive_handler = pc->phs.handlers->receive[utype.type]) == NULL) {
     log_verbose("Received unsupported packet type %d (%s). The connection "
                 "will be closed now.",
diff --git a/common/traderoutes.c b/common/traderoutes.c
index d88b267b97..d8cb920541 100644
--- a/common/traderoutes.c
+++ b/common/traderoutes.c
@@ -121,7 +121,7 @@ enum trade_route_type cities_trade_route_type(const struct city *pcity1,
 *************************************************************************/
 int trade_route_type_trade_pct(enum trade_route_type type)
 {
-  if (type < 0 || type >= TRT_LAST) {
+  if (type >= TRT_LAST) {
     return 0;
   }
 
diff --git a/common/unit.c b/common/unit.c
index 9e0747b42d..0a253cf724 100644
--- a/common/unit.c
+++ b/common/unit.c
@@ -536,7 +536,7 @@ static bool is_real_activity(enum unit_activity activity)
 {
   /* ACTIVITY_FORTRESS, ACTIVITY_AIRBASE, ACTIVITY_OLD_ROAD, and
    * ACTIVITY_OLD_RAILROAD are deprecated */
-  return (0 <= activity && activity < ACTIVITY_LAST)
+  return (activity < ACTIVITY_LAST)
           && activity != ACTIVITY_FORTRESS
           && activity != ACTIVITY_AIRBASE
           && activity != ACTIVITY_OLD_ROAD
diff --git a/utility/generate_specenum.py b/utility/generate_specenum.py
index b524f38f1d..9778276215 100755
--- a/utility/generate_specenum.py
+++ b/utility/generate_specenum.py
@@ -335,8 +335,7 @@ static inline bool SPECENUM_FOO(_is_valid)(enum SPECENUM_NAME enumerator)
   FC_STATIC_ASSERT(ARRAY_SIZE(valid) == SPECENUM_SIZE,
                    valid_array_size_check);
 
-  return (enumerator >= 0
-          && enumerator < ARRAY_SIZE(valid)
+  return (enumerator < ARRAY_SIZE(valid)
           && valid[enumerator]);
 #endif /* SPECENUM_BITWISE */
 }
@@ -481,7 +480,7 @@ static inline const char *SPECENUM_FOO(_name)(enum SPECENUM_NAME enumerator)
     }
   }
 #else
-  if (enumerator >= 0 && enumerator < ARRAY_SIZE(names)) {
+  if (enumerator < ARRAY_SIZE(names)) {
     return names[enumerator];
   }
 #endif /* SPECENUM_BITWISE */
@@ -588,7 +587,7 @@ SPECENUM_FOO(_translated_name)(enum SPECENUM_NAME enumerator)
     }
   }
 #else
-  if (enumerator >= 0 && enumerator < ARRAY_SIZE(names)) {
+  if (enumerator < ARRAY_SIZE(names)) {
     return names[enumerator];
   }
 #endif /* SPECENUM_BITWISE */
-- 
2.25.1

